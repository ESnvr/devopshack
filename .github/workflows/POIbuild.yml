name: .NET

env:
  docker_path: apis/poi/web
  poi_path: apis/poi/**
  registry: openhackhoe31nr7acr.azurecr.io
  repository: devopsoh/api-poi
  staging_url: https://openhackhoe31nr7poi-staging.azurewebsites.net
  prod_url: https://openhackhoe31nr7poi.azurewebsites.net
  resource_group: openhackhoe31nr7rg
  webapp_name: openhackhoe31nr7poi
  build_name: POI
  
on:
  push:
    branches: [ master1 ]
    paths: 
    - apis/poi**
    - .github/workflows/POIbuild.yml
  pull_request:
    branches: [ master1 ]
    paths: 
    - apis/poi**
    - .github/workflows/POIbuild.yml

jobs:
  build_and_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.202
    - name: Add Code Coverage Tools
      working-directory: apis/poi/tests/UnitTests
      run: dotnet add package coverlet.msbuild
    - name: Restore dependencies
      run: dotnet restore apis/poi/web/*.csproj
    - name: Build .NET Web
      run: dotnet build --configuration Release --no-restore apis/poi/web/*.csproj
    - name: NET Build Unit Tests
      run: dotnet build --configuration Release apis/poi/tests/UnitTests/UnitTests.csproj
    - name: .NET Test
      run: dotnet test --no-restore --verbosity normal apis/poi/tests/UnitTests  /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov
    
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
          
  docker_build_and_push:
    if: github.ref == 'refs/heads/master1'
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
    - uses: actions/checkout@v2
    - name: docker login
      run: docker login $registry -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_KEY }}
    - name: Docker build
      run: docker build -t $registry/$repository:${{github.run_number}} --build-arg build_version=${{github.run_number}} $docker_path
    - name: Docker Push
      run: docker push $registry/$repository:${{github.run_number}}
      
  deploy_staging:
    if: github.ref == 'refs/heads/master1'
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
    - name: Azure Auth
      uses: azure/login@v1
      with: 
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: WebApp Deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.webapp_name }}
        slot-name: staging
        images: ${{ env.registry }}/${{ env.repository }}:${{github.run_number}}
        
  swap_slots:
    if: github.ref == 'refs/heads/master1'
    runs-on: ubuntu-latest
    needs: deploy_staging
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap staging to production
      run: |
        az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production
